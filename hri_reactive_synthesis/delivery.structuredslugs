[INPUT]
# human
wait
obstacle_2
obstacle_3
workload:0...25
complete_work_at_workstation

[OUTPUT]
# robot
r_state:0...4
workload_add:0...15
next_state_is_workstation
complete_work_with_robot
complete_dropoff_success
complete_dropoff_tries:0...3


[ENV_INIT]
!wait
!complete_work_at_workstation 
workload = 20

[SYS_INIT]
r_state = 1
!next_state_is_workstation
!complete_work_with_robot
workload_add = 0


[ENV_TRANS]
# Obstacles will get out of the way
obstacle_2 -> !obstacle_2'
obstacle_3 -> !obstacle_3'
# Obstacle will not intentionally interfere with the robot
r_state = 2 -> !obstacle_2
r_state = 3 -> !obstacle_3

workload = 0 & r_state != 4 -> wait
workload != 0 -> !wait
wait & (workload + workload_add = 0) -> wait' 

next_state_is_workstation & workload+workload_add <= 25 -> (workload' = workload+workload_add)
next_state_is_workstation & workload+workload_add >  25 -> (workload' = 25)

(!next_state_is_workstation & !wait) -> (workload'+1 = workload)

workload' < workload -> complete_work_at_workstation'
next_state_is_workstation -> !complete_work_at_workstation'

[ENV_LIVENESS]


[SYS_TRANS]

# Flags
(r_state' = 4)  -> next_state_is_workstation
(r_state' != 4) -> !next_state_is_workstation

# Transferring work to human 
r_state = 3 & next_state_is_workstation -> workload_add = 15
(next_state_is_workstation & (workload_add = 0 || workload_add = 15)) || (!next_state_is_workstation & workload_add = 0)

# Flag for when robot has completed work with it
next_state_is_workstation & complete_work_at_workstation -> complete_work_with_robot' 


#complete_work_with_robot & r_state != 0 -> complete_work_with_robot'
#complete_work_with_robot & r_state = 0 -> !complete_work_with_robot'
#!complete_work_with_robot & !next_state_is_workstation -> !complete_work_with_robot'

complete_work_with_robot & r_state != 0 -> complete_work_with_robot'
!complete_work_with_robot & !next_state_is_workstation -> !complete_work_with_robot'

complete_work_with_robot & r_state = 0 & complete_dropoff_success -> !complete_work_with_robot'
complete_work_with_robot & r_state = 0 & !complete_dropoff_success -> complete_work_with_robot'

complete_work_with_robot & r_state = 0 & complete_dropoff_tries < 3 -> complete_dropoff_tries' = (complete_dropoff_tries + 1) & (complete_dropoff_success || !complete_dropoff_success) 
complete_work_with_robot & r_state = 0 & complete_dropoff_tries = 3 -> complete_dropoff_tries' = 0 & (complete_dropoff_success) 


r_state != 0 -> !complete_dropoff_success 

r_state = 0 &  !complete_dropoff_success -> r_state' = 0
r_state = 0 &   complete_dropoff_success -> r_state' = 1

# Allowable robot transitions
(r_state = 0) & (obstacle_2) -> (r_state' = 0) || (r_state' = 1)
(r_state = 1) & (obstacle_2) -> (r_state' = 0) || (r_state' = 1)
(r_state = 3) & (obstacle_2) -> (r_state' = 3) || (r_state' = 4) 
(r_state = 2) & (obstacle_3) -> (r_state' = 1) || (r_state' = 0) 
(r_state = 4) & (obstacle_3) -> (r_state' = 4) 

(r_state = 0) -> (r_state' = 0) || (r_state' = 1)
(r_state = 1) -> (r_state' = 1) || (r_state' = 2) 
(r_state = 2) & complete_work_with_robot  -> (r_state' = 0) || (r_state' = 2) || (r_state' = 3)
(r_state = 2) & !complete_work_with_robot -> (r_state' = 1) || (r_state' = 2) || (r_state' = 3)
(r_state = 3) -> (r_state' = 2) || (r_state' = 3) || (r_state' = 4)
(r_state = 4) -> (r_state' = 4) || (r_state' = 3)

workload > 0

(workload <= 20)

[SYS_LIVENESS]
(r_state = 0) 
(r_state = 4)
#(workload > 0) & (workload <= 20) & (r_state = 4) & (workload_add > 0)
