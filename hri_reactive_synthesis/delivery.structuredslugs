[INPUT]
# human
wait
obstacle_2
obstacle_3
workload:0...30
complete_work_at_workstation
complete_dropoff_success
complete_dropoff_tries:0...2
workload_stays_constant
human_present
human_count:0...6

[OUTPUT]
# robot
r_state:0...4
workload_add:0...15
next_state_is_workstation
complete_work_with_robot
next_arriving_at_0
next_is_2
next_is_3



[ENV_INIT]
!wait
!complete_work_at_workstation 
workload = 12
#workload >= 9 && workload <= 26
!workload_stays_constant
human_present
human_count = 0

[SYS_INIT]
r_state = 1
!next_state_is_workstation
!complete_work_with_robot
workload_add = 0


[ENV_TRANS]
# Obstacles will get out of the way
obstacle_2 -> !obstacle_2'
obstacle_3 -> !obstacle_3'


# Obstacle will not intentionally interfere with the robot
#r_state = 2 -> !obstacle_2
#r_state = 3 -> !obstacle_3
#r_state = 3 -> (!obstacle_3 || obstacle_3) 
#r_state = 2 -> (!obstacle_2 || obstacle_2) 

next_is_2 -> !obstacle_2' & (obstacle_3' || !obstacle_3')
!next_is_2 -> obstacle_2' || !obstacle_2'
next_is_3 -> !obstacle_3' & (obstacle_2' || !obstacle_2')
!next_is_3 -> (obstacle_3' || !obstacle_3')

# Waiting behavior
workload = 0 & r_state != 4 -> wait
workload != 0 -> !wait
wait & (workload + workload_add = 0) -> wait' 

# Workload Growth
next_state_is_workstation & workload+workload_add <= 30 -> (workload' = workload+workload_add)
next_state_is_workstation & workload+workload_add >  30 -> (workload' = 30)

# Workload Decrease
(!next_state_is_workstation & !wait & human_present & human_present') & !workload_stays_constant -> ( (workload'+1 = workload) ||  (workload'+2 = workload) || (workload' = workload) )
(!next_state_is_workstation & !wait & human_present & human_present') & workload_stays_constant -> ( (workload'+1 = workload) ||  (workload'+2 = workload) )

!(human_present & human_present') -> workload' = workload

r_state = 4 -> human_present
next_state_is_workstation -> human_present' 


#human_present & human_count < 6 -> human_present' 
#human_present & human_count = 6 -> !human_present' 
!human_present & human_count = 6 -> human_present' 
!human_present & human_count < 6 -> human_present' || !human_present' 

human_count < 6  -> human_count' = human_count+1
human_count = 6 -> human_count' = 0
!human_present & human_present' -> human_count' = 0


(workload' = workload) -> workload_stays_constant'
(workload' != workload) -> !workload_stays_constant'


# Flagging when there is complete work for the robot to pick up
workload' < workload -> complete_work_at_workstation'
complete_work_at_workstation & !next_state_is_workstation  -> complete_work_at_workstation'
next_state_is_workstation -> !complete_work_at_workstation'

complete_work_with_robot & r_state = 0 & !complete_dropoff_success -> (complete_dropoff_success' || !complete_dropoff_success') 
complete_dropoff_tries = 1 & !complete_dropoff_success -> complete_dropoff_success'

next_arriving_at_0 -> (complete_dropoff_tries' = 1) & (complete_dropoff_success' || !complete_dropoff_success') 
r_state = 0 & complete_dropoff_tries < 2 & !complete_dropoff_success -> complete_dropoff_tries' = (complete_dropoff_tries + 1) 

complete_dropoff_success -> (complete_dropoff_tries' = 0 & !complete_dropoff_success') 
(r_state = 1 || r_state = 2 || r_state = 3 || r_state = 4) -> (complete_dropoff_tries = 0 & !complete_dropoff_success) 




[ENV_LIVENESS]
!human_present
human_present

[SYS_TRANS]

# Flag when the next state is workstation
(r_state' = 4)  -> next_state_is_workstation
(r_state' != 4) -> !next_state_is_workstation

# Transferring work to human
# There will always be a transfer when the robot arrives at workstation 
# Also have tried workload_add = 8
r_state = 3 & next_state_is_workstation -> workload_add = 15
r_state = 4 & next_state_is_workstation -> workload_add = 0
# The robot may or may not continue to give the human work 
(next_state_is_workstation & (workload_add = 0 || workload_add = 15)) || (!next_state_is_workstation & workload_add = 0)


# Tracking when the robot successfully drops off completed work at Inventory
complete_work_with_robot & r_state = 0 &  complete_dropoff_success -> !complete_work_with_robot'
complete_work_with_robot & r_state = 0 & !complete_dropoff_success -> complete_work_with_robot'

# Flag for when robot has completed work with it
next_state_is_workstation & complete_work_at_workstation -> complete_work_with_robot' 

complete_work_with_robot & r_state != 0 -> complete_work_with_robot'

!complete_work_with_robot & !next_state_is_workstation -> !complete_work_with_robot'

r_state != 0 & r_state' = 0 -> next_arriving_at_0
!(r_state != 0 & r_state' = 0) -> !next_arriving_at_0


r_state' = 2 -> next_is_2
r_state' != 2 -> !next_is_2
r_state' = 3 -> next_is_3
r_state' != 3 -> !next_is_3

# Once the robot successfully drops off work, move to state 1
r_state = 0 &  !complete_dropoff_success -> r_state' = 0
r_state = 0 &   complete_dropoff_success -> (r_state' = 1) || (r_state' = 2)

# Allowable robot transitions
(r_state = 0) & (obstacle_2)  & (complete_work_with_robot || !complete_work_with_robot) & (human_present || !human_present) ->  (r_state' = 0) || (r_state' = 1)
(r_state = 0) & (!obstacle_2) & (complete_work_with_robot || !complete_work_with_robot) & (human_present || !human_present) -> (r_state' = 0) || (r_state' = 1)
(r_state = 1) & (obstacle_2)  & (complete_work_with_robot || !complete_work_with_robot) & (human_present || !human_present) ->  (r_state' = 1)
(r_state = 1) & (!obstacle_2) & (complete_work_with_robot || !complete_work_with_robot) & (human_present || !human_present) -> (r_state' = 1) || (r_state' = 2) 

(r_state = 2) & (obstacle_3) & complete_work_with_robot & (human_present || !human_present) ->  (r_state' = 0) || (r_state' = 2) 
(r_state = 2) & (!obstacle_3) & complete_work_with_robot & (human_present || !human_present) -> (r_state' = 0) || (r_state' = 2) || (r_state' = 3)
(r_state = 2) & (obstacle_3) & !complete_work_with_robot & (human_present || !human_present) -> (r_state' = 1) || (r_state' = 2) 
(r_state = 2) & (!obstacle_3) & !complete_work_with_robot & (human_present || !human_present) -> (r_state' = 1)|| (r_state' = 2) || (r_state' = 3)

(r_state = 3) & (obstacle_2)  & (complete_work_with_robot || !complete_work_with_robot) & human_present' -> (r_state' = 3) || (r_state' = 4)
(r_state = 3) & (!obstacle_2) & (complete_work_with_robot || !complete_work_with_robot) & human_present' -> (r_state' = 2) || (r_state' = 3) || (r_state' = 4)

(r_state = 3) & (obstacle_2)  & (complete_work_with_robot || !complete_work_with_robot) & !human_present' -> (r_state' = 3)
(r_state = 3) & (!obstacle_2) & (complete_work_with_robot || !complete_work_with_robot) & !human_present' -> (r_state' = 2) || (r_state' = 3) 

(r_state = 4) & (obstacle_3) & (complete_work_with_robot || !complete_work_with_robot) & (human_present || !human_present) -> (r_state' = 4) 
(r_state = 4) & (!obstacle_3)& (complete_work_with_robot || !complete_work_with_robot) & (human_present || !human_present) ->  (r_state' = 3)


workload > 0

(workload <= 26)

[SYS_LIVENESS]
(r_state = 0) 
(r_state = 4)




